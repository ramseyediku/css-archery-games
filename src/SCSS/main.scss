@use "reset";

:root {
  // variables and custom properties
  --clr-dark: hsl(240, 4%, 16%);
  --clr-dark-console: hsl(0, 0%, 11%);

  --clr-light: hsl(0, 0%, 100%);
  --clr-light-bg: hsl(0, 0%, 99%);

  --clr-accent: hsl(0, 100%, 63%);

  --border-radius: 35px;
  --box-shadow: hsl(240, 30%, 28%, 0.25) 0px 50px 100px -20px,
    hsl(0, 0%, 0%, 0.3) 0px 30px 60px -30px;
  --text-shadow-light: 2px 2px 2px var(--clr-light);
  --text-shadow-accent: 2px 2px 2px var(--clr-accent);
}

// keyframes for basic animations
@keyframes appear {
  from {
    scale: (0);
  }

  to {
    scale: (1);
  }
}

@keyframes disappear {
  from {
    scale: (1);
  }

  to {
    scale: (0);
  }
}

// logic to find the total duration of the game (by taking the sum of the lifespan of each target)
$no-of-targets: 10;
$target-life-span: 1;
$delay-between-targets: 0.75;

@function gameDuration(
  $no-of-targets,
  $target-life-span,
  $delay-between-targets
) {
  $targets-life-span: 0;

  @for $o from 2 through $no-of-targets {
    $targets-life-span: $o - 1 + $target-life-span + $delay-between-targets;
  }

  $game-duration: $target-life-span + $targets-life-span + 2;
  @return $game-duration;
}

body {
  background-color: var(--clr-light-bg);
  display: grid;
  place-items: center;
  height: 99vh;
  counter-reset: score;
}

// radio buttons will control which screen is visible, simulate the switching of screens and the movements of various elements in each game screen
input[name="screen"] {
  visibility: hidden;

  &#screen-1:checked ~ .console__screen--screen-1,
  &#screen-2:checked ~ .console__screen--screen-2,
  &#screen-3:checked ~ .console__screen--screen-3 {
    opacity: 1;
    pointer-events: revert;
  }

  &#screen-2:checked ~ .console__screen--screen-2 {
    .target {
      animation-play-state: running;
    }
  }

  &#screen-2:checked ~ .console__screen--screen-3 {
    $duration: gameDuration(
      $no-of-targets,
      $target-life-span,
      $delay-between-targets
    );

    display: grid;
    place-items: center;
    animation: screenEnd 0.5s #{$duration}s forwards;

    @keyframes screenEnd {
      100% {
        opacity: 1;
        pointer-events: revert;
      }
    }
  }
}

// default styling for the game screens
.console {
  width: 60%;
  min-height: 60%;
  margin-inline: auto;
  border-radius: var(--border-radius);
  background-color: var(--clr-dark-console);
  padding: 1em;
  position: relative;
  box-shadow: var(--box-shadow);

  &__screen {
    position: absolute;
    inset: 2.5%;
    background-image: url("../IMG/bgc.jpg");
    background-size: cover;
    background-repeat: no-repeat;
    border-radius: calc(var(--border-radius) / 2);

    // by default all screens should be turned off (opacity 0) and then turned on when needed
    opacity: 0;
    pointer-events: none;

    &--screen-1 {
      display: grid;
      place-items: center;
    }

    &__game {
      position: relative;
      width: 100%;
      height: 100%;
    }
  }
}

// styling the targets (which are radio buttons) and adding faux interactivity through animations and transitions
.target {
  --target-width: 2em;
  --target-spacing: 5px;

  position: absolute;
  appearance: none;
  background-color: var(--clr-accent);
  width: var(--target-width);
  cursor: pointer;
  aspect-ratio: 1/1;
  border-radius: 50%;
  margin: 0;
  box-shadow: var(--clr-light) 0px 0px 0px var(--target-spacing),
    var(--clr-accent) 0px 0px 0px calc(var(--target-spacing) * 2),
    var(--clr-light) 0px 0px 0px calc(var(--target-spacing) * 3),
    var(--clr-accent) 0px 0px 0px calc(var(--target-spacing) * 4);

  left: var(--x-pos);
  bottom: var(--y-pos);

  scale: 0;

  @for $o from 1 through $no-of-targets {
    // place targets in random positions
    &:nth-child(#{$o}) {
      // for now hard code trasnlate x and y to magic numbers that will make sure the targetrs are within the screen
      --x-pos: #{random((60) + 25)}%;
      --y-pos: #{random((60) + 25)}%;

      @if $o == 1 {
        $target-delay: #{$o}s;
        animation: appear #{$target-life-span}s linear $target-delay forwards;
      } @else {
        $target-delay: #{$o - 1 + $target-life-span + $delay-between-targets}s;
        animation: appear #{$target-life-span}s linear $target-delay forwards;
      }
      animation-play-state: paused;
    }
  }

  &:checked {
    animation-play-state: paused;
    // increase score by 1 each time target is hit
    counter-increment: score;
    opacity: 0;
  }
}

// other elements that arent strictly game elements
.logo {
  width: 5em;
  position: absolute;
  top: 1%;
  left: 1%;
}

.title {
  color: var(--clr-accent);
  margin: 0;
  text-align: center;
  margin-bottom: 1em;
  font-size: calc(2.25rem + 3vmin);
  text-shadow: var(--text-shadow-light);
}

.button {
  margin: 0;
  display: block;
  background-color: var(--clr-accent);
  color: var(--clr-light);
  border-radius: var(--border-radius);
  padding: 0.9em 2.9em;
  font-size: calc(0.65rem + 0.75vmin);
  cursor: pointer;
  outline: 3px solid var(--clr-light);
  width: max-content;
  margin-inline: auto;
  font-weight: 600;
  border: 0;
}

.score {
  font-weight: 700;
  font-size: 3rem;
  color: var(--clr-light);
  text-shadow: var(--text-shadow-accent);

  // show of the final score
  &::after {
    content: " " counter(score) "/10. Well done!";
  }
}
