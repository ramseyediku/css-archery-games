@use "reset";

:root {
  // css custom properties
  --clr-dark: hsl(240, 4%, 16%);
  --clr-dark-console: hsl(0, 0%, 11%);
  --clr-light: hsl(0, 0%, 100%);
  --clr-accent: hsl(0, 100%, 63%);

  --border-radius: 35px;
}

$no-of-targets: 10;
$target-life-span: 1;
// fix timing functions to be perfectly in sync one after the other
$delay-between-targets: 0.75;

@function gameDuration(
  $no-of-targets,
  $target-life-span,
  $delay-between-targets
) {
  $targets-life-span: 0;

  @for $o from 2 through $no-of-targets {
    $targets-life-span: $o - 1 + $target-life-span + $delay-between-targets;
  }

  $game-duration: $target-life-span + $targets-life-span + 2;
  @return $game-duration;
}

body {
  background-color: var(--clr-dark);
  display: grid;
  place-items: center;
  height: 99vh;
  counter-reset: score;
}

input[name="screen"] {
  visibility: hidden;

  &#screen-1:checked ~ .console__screen--screen-1,
  &#screen-2:checked ~ .console__screen--screen-2,
  &#screen-3:checked ~ .console__screen--screen-3 {
    opacity: 1;
    pointer-events: revert;
  }
}

.console {
  width: 60%;
  height: 60vh;
  margin-inline: auto;
  border-radius: var(--border-radius);
  background-color: var(--clr-dark-console);
  padding: 1em;
  position: relative;

  &::after {
    --console-button-width: 3em;
    content: "";
    position: absolute;
    width: var(--console-button-width);
    aspect-ratio: 1/1;
    border-radius: 50%;
    outline: solid 1px var(--clr-light);
    right: 1.75%;
    bottom: calc(50% - calc(var(--console-button-width) / 2));
    cursor: pointer;
  }

  &__screen {
    border: solid 1px red;
    position: absolute;
    inset: 2.5% 8% 2.5% 1.5%;
    background-image: url("../IMG/bgc.jpg");
    background-size: cover;
    background-repeat: no-repeat;
    border-radius: calc(var(--border-radius) / 2);

    // by default all screens should be turned off (opacity 0) and then turned on when needed
    opacity: 0;
    pointer-events: none;

    &--screen-1 {
      display: grid;
      place-items: center;
    }

    &__game {
      position: relative;
      width: 100%;
      height: 100%;
    }

    input[name="screen"]#screen-2:checked ~ &--screen-2 {
      .target {
        animation-play-state: running;
      }
    }

    input[name="screen"]#screen-2:checked ~ &--screen-3 {
      $duration: gameDuration(
        $no-of-targets,
        $target-life-span,
        $delay-between-targets
      );

      display: grid;
      place-items: center;
      // end screen animation will kick in when all target animations are finishe aka we finished the game (for now it is an hard coded value)
      animation: screenEnd 0.5s #{$duration}s forwards;

      @keyframes screenEnd {
        100% {
          opacity: 1;
          pointer-events: revert;
        }
      }
    }
  }
}

.target {
  --target-width: 2em;
  --target-spacing: 5px;

  position: absolute;
  appearance: none;
  background-color: var(--clr-accent);
  width: var(--target-width);
  cursor: pointer;
  aspect-ratio: 1/1;
  border-radius: 50%;
  margin: 0;
  box-shadow: var(--clr-light) 0px 0px 0px var(--target-spacing),
    var(--clr-accent) 0px 0px 0px calc(var(--target-spacing) * 2),
    var(--clr-light) 0px 0px 0px calc(var(--target-spacing) * 3),
    var(--clr-accent) 0px 0px 0px calc(var(--target-spacing) * 4);

  translate: calc(var(--translate-X) - (2em + var(--target-spacing) * 4))
    calc(var(--translate-Y) - (2em + var(--target-spacing) * 4));

  scale: 0;

  @for $o from 1 through $no-of-targets {
    // place targets in random positions
    &:nth-child(#{$o}) {
      // for now hard code trasnlate x and y to magic numbers that will make sure the targetrs are within the screen
      --translate-X: #{random(80) + 20};
      --translate-Y: #{random(80) + 20};

      @if $o == 1 {
        $target-delay: #{$o}s;
        animation: appear #{$target-life-span}s linear $target-delay forwards;
      } @else {
        $target-delay: #{$o - 1 + $target-life-span + $delay-between-targets}s;
        animation: appear #{$target-life-span}s linear $target-delay forwards;
      }
      animation-play-state: paused;
    }
  }

  &:checked {
    animation-play-state: paused;
    counter-increment: score;
    opacity: 0;
  }
}

.highscore {
  font-weight: 700;
  font-size: 3rem;
  color: var(--clr-light);

  &::after {
    content: " hit " counter(score) " out of 10 targets!";
  }
}

label,
h1 {
  margin: 0;
  display: block;
}

.title {
  color: var(--clr-dark);
  margin-bottom: 1em;
  font-size: 3rem;

  span {
    color: var(--clr-accent);
  }
}

label,
button {
  background-color: var(--clr-accent);
  color: var(--clr-light);
  border-radius: var(--border-radius);
  padding: 1em 3em;
  cursor: pointer;
  outline: 2px solid var(--clr-light);
  width: max-content;
  margin-inline: auto;
  font-weight: 600;
  border: 0;
}

@keyframes appear {
  from {
    scale: (0);
  }

  to {
    scale: (1);
  }
}

@keyframes disappear {
  from {
    scale: (1);
  }

  to {
    scale: (0);
  }
}
